{"version":3,"sources":["actions/index.js","components/FloorsModel.js","components/FloorsScene.js","components/InfoWindow.js","App.js","serviceWorker.js","reducers/setClickedFloor.js","reducers/allReducers.js","index.js"],"names":["setClickedFloor","index","type","payload","FloorsModel","clickedFloor","onClickedFloorChange","floorRefs","useRef","Array","materialRefs","useFrame","current","forEach","ref","indexDifference","Math","abs","opacity","position","y","useState","hovered","setHovered","nodes","useLoader","GLTFLoader","hoveredOnFloor","mouseInside","hoveredArray","map","floorObject","className","key","e","dispose","onPointerOver","stopPropagation","onPointerOut","intersections","length","onClick","clickedOnFloor","geometry","floor1_1","rotation","attach","transparent","color","extend","OrbitControls","softShadows","CameraControls","useThree","camera","domElement","gl","controls","state","update","args","minDistance","mapDispatchToProps","connect","colorManagement","shadowMap","fov","intensity","fallback","style","right","App","Boolean","window","location","hostname","match","initialState","action","combineReducers","store","createStore","reducers","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fd73a172.chunk.js","sourcesContent":["export const setClickedFloor = (index) => {\r\n  return {\r\n    type: \"SET_CLICKED_FLOOR\",\r\n    payload: index\r\n  };\r\n};\r\n","import React, { useRef, useState } from \"react\";\r\nimport { useFrame, useLoader } from \"react-three-fiber\";\r\n\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\n\r\nconst FloorsModel = ({ clickedFloor, onClickedFloorChange }) => {\r\n  const floorRefs = useRef(new Array());\r\n  const materialRefs = useRef(new Array());\r\n\r\n  useFrame(() => {\r\n    //   const t = state.clock.getElapsedTime();\r\n    const animationSpeed = 1;\r\n    if (clickedFloor !== null) {\r\n      //  floorRefs.current[clickedFloor].position.y += 1;\r\n      floorRefs.current.forEach((ref, index) => {\r\n        let indexDifference = Math.abs(clickedFloor - index);\r\n        if (clickedFloor !== index) {\r\n          materialRefs.current[index].opacity = 0.2;\r\n          if (clickedFloor < index) {\r\n            if (ref.position.y < index * 10 + indexDifference * 20) {\r\n              ref.position.y += animationSpeed;\r\n            }\r\n          } else {\r\n            if (ref.position.y > index * 10 - indexDifference * 20) {\r\n              ref.position.y -= animationSpeed;\r\n            }\r\n          }\r\n        } else {\r\n          if (ref.position.y < index * 10) {\r\n            ref.position.y += animationSpeed;\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      floorRefs.current.forEach((ref, index) => {\r\n        if (ref.position.y > index * 10) {\r\n          materialRefs.current[index].opacity = 1;\r\n          //   materialRefs.current[index].opacity += 0.1;\r\n          ref.position.y -= animationSpeed;\r\n        } else if (ref.position.y < index * 10) {\r\n          materialRefs.current[index].opacity = 1;\r\n          //  materialRefs.current[index].opacity += 0.1;\r\n          ref.position.y += animationSpeed;\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  const [colors, setColors] = useState(false);\r\n  const [hovered, setHovered] = useState([false, false, false, false, false]);\r\n\r\n  const changeColor = () => {\r\n    let currentColors = colors;\r\n    setColors(!currentColors);\r\n  };\r\n  const { nodes } = useLoader(GLTFLoader, \"./models/floor01.glb\");\r\n\r\n  const hoveredOnFloor = (index, mouseInside) => {\r\n    if (clickedFloor === null) {\r\n      let hoveredArray = [...hovered];\r\n      if (mouseInside) {\r\n        hoveredArray[index] = true;\r\n      } else {\r\n        hoveredArray[index] = false;\r\n      }\r\n      setHovered(hoveredArray);\r\n    } else {\r\n      setHovered([false, false, false, false, false]);\r\n    }\r\n  };\r\n\r\n  const clickedOnFloor = (index) => {\r\n    if (clickedFloor === null) {\r\n      onClickedFloorChange(index);\r\n    } else if (clickedFloor === index) {\r\n      onClickedFloorChange(null);\r\n    }\r\n  };\r\n\r\n  const floorObjects = [0, 1, 2, 3, 4];\r\n\r\n  return (\r\n    <group>\r\n      {floorObjects.map((floorObject, index) => (\r\n        <mesh\r\n          className={`floor floor${index}`}\r\n          key={index}\r\n          ref={(e) => (floorRefs.current[index] = e)}\r\n          dispose={null}\r\n          onPointerOver={(e) => (e.stopPropagation(), hoveredOnFloor(index, true))}\r\n          onPointerOut={(e) => e.intersections.length && hoveredOnFloor(index, false)}\r\n          onClick={(e) => (e.stopPropagation(), clickedOnFloor(index))}\r\n          geometry={nodes.floor1_1.geometry}\r\n          opacity={0.5}\r\n          rotation={[1.5, 0, 0]}\r\n          position={[0, 10 * index, 0]}\r\n        >\r\n          <meshStandardMaterial\r\n            attach=\"material\"\r\n            ref={(e) => (materialRefs.current[index] = e)}\r\n            transparent={true}\r\n            color={hovered[index] ? \"red\" : \"white\"}\r\n          />\r\n        </mesh>\r\n      ))}\r\n    </group>\r\n  );\r\n};\r\n\r\nexport default FloorsModel;\r\n","import React, { useRef, useState, Suspense } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setClickedFloor } from \"../actions\";\r\nimport { Canvas, useFrame, useThree, extend } from \"react-three-fiber\";\r\nimport { softShadows } from \"drei\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport FloorsModel from \"./FloorsModel\";\r\n\r\n//\"homepage\": \"http://https://robertasliekis.github.io/3d-floors/\",\r\n\r\nextend({ OrbitControls });\r\n\r\nsoftShadows();\r\n\r\nconst CameraControls = () => {\r\n  const {\r\n    camera,\r\n    gl: { domElement }\r\n  } = useThree();\r\n  const controls = useRef();\r\n  useFrame((state) => controls.current.update());\r\n  return <orbitControls ref={controls} args={[camera, domElement]} minDistance={150} />;\r\n};\r\n\r\nfunction FloorsScene({ clickedFloor, setClickedFloor }) {\r\n  const clickedFloorChange = (index) => {\r\n    setClickedFloor(index);\r\n  };\r\n  return (\r\n    <div className=\"floor-model-container\">\r\n      <Canvas colorManagement shadowMap camera={{ position: [-5, 2, 10], fov: 60 }}>\r\n        <CameraControls />\r\n        <ambientLight intensity={0.3} />\r\n        <pointLight position={[-10, 0, -20]} intensity={0.5} />\r\n        <group>\r\n          <Suspense fallback={null}>\r\n            <FloorsModel onClickedFloorChange={clickedFloorChange} clickedFloor={clickedFloor} />\r\n          </Suspense>\r\n        </group>\r\n      </Canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    clickedFloor: state.setClickedFloor.clickedFloor\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setClickedFloor\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FloorsScene);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { setClickedFloor } from \"../actions\";\r\n\r\nfunction InfoWindow({ clickedFloor, setClickedFloor }) {\r\n  return (\r\n    <div className=\"info-container\" style={{ right: clickedFloor !== null ? \"0%\" : \"-100%\" }}>\r\n      <h1>{`Floor ${clickedFloor + 1}`}</h1>\r\n      <p>\r\n        Lorem ipsum dolor sit, amet consectetur adipisicing elit. Ipsa explicabo, alias a eum cumque vel praesentium dolores consequuntur\r\n        debitis blanditiis perferendis tempore tenetur qui. Esse odio aperiam rerum reiciendis soluta.\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    clickedFloor: state.setClickedFloor.clickedFloor\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setClickedFloor\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InfoWindow);\r\n","import React from \"react\";\nimport FloorsScene from \"./components/FloorsScene\";\nimport InfoWindow from \"./components/InfoWindow\";\n\n//\"homepage\": \"//https://robertasliekis.github.io/3d-floors/\",\n\nfunction App() {\n  return (\n    <div className=\"website-wrapper\">\n      <FloorsScene />\n      <InfoWindow />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n  clickedFloor: null\r\n};\r\n\r\nconst setClickedFloor = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_CLICKED_FLOOR\":\r\n      return { ...state, clickedFloor: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default setClickedFloor;\r\n","import { combineReducers } from \"redux\";\r\nimport setClickedFloor from \"./setClickedFloor\";\r\n\r\nexport default combineReducers({\r\n  setClickedFloor: setClickedFloor\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport reducers from \"./reducers/allReducers\";\n\nconst store = createStore(reducers);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}