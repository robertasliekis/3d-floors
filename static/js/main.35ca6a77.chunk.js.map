{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["extend","OrbitControls","softShadows","Floor","useState","colors","setColors","changeColor","index","currentColors","nodes","useLoader","GLTFLoader","key","console","log","geometry","floor1_1","onClick","rotation","position","attach","color","CameraControls","useThree","camera","domElement","gl","controls","useRef","useFrame","state","current","update","ref","args","minDistance","App","colorManagement","shadowMap","fov","intensity","castShadow","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","Math","PI","receiveShadow","opacity","fallback","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qTAkBAA,YAAO,CAAEC,oBAETC,cAEA,IA4BMC,EAAQ,WAAO,IAAD,EACUC,mBAAS,EAAC,GAAO,GAAO,GAAO,IADzC,mBACXC,EADW,KACHC,EADG,KAGZC,EAAc,SAACC,GACnB,IAAIC,EAAa,YAAOJ,GACxBI,EAAcD,IAAUC,EAAcD,GACtCF,EAAUG,IAEJC,EAAUC,YAAUC,IAAY,wBAAhCF,MAER,OACE,2BAAOG,IAAKR,GACTS,QAAQC,IAAI,QACb,0BAAMC,SAAUN,EAAMO,SAASD,SAAUE,QAAS,kBAAMX,EAAY,IAAIY,SAAU,CAAC,IAAK,EAAG,GAAIC,SAAU,CAAC,EAAG,GAAI,IAC/G,0CAAsBC,OAAO,WAAWC,MAAOjB,EAAO,GAAK,SAAW,WAExE,0BAAMW,SAAUN,EAAMO,SAASD,SAAUE,QAAS,kBAAMX,EAAY,IAAIY,SAAU,CAAC,IAAK,EAAG,GAAIC,SAAU,CAAC,EAAG,EAAG,IAC9G,0CAAsBC,OAAO,WAAWC,MAAOjB,EAAO,GAAK,SAAW,WAExE,0BAAMW,SAAUN,EAAMO,SAASD,SAAUE,QAAS,kBAAMX,EAAY,IAAIY,SAAU,CAAC,IAAK,EAAG,GAAIC,SAAU,CAAC,GAAI,GAAI,IAChH,0CAAsBC,OAAO,WAAWC,MAAOjB,EAAO,GAAK,SAAW,WAExE,0BAAMW,SAAUN,EAAMO,SAASD,SAAUE,QAAS,kBAAMX,EAAY,IAAIY,SAAU,CAAC,IAAK,EAAG,GAAIC,SAAU,CAAC,GAAI,GAAI,IAChH,0CAAsBC,OAAO,WAAWC,MAAOjB,EAAO,GAAK,SAAW,aAMxEkB,EAAiB,WAAM,MAQvBC,cAFFC,EANyB,EAMzBA,OACMC,EAPmB,EAOzBC,GAAMD,WAIFE,EAAWC,mBAEjB,OADAC,aAAS,SAACC,GAAD,OAAWH,EAASI,QAAQC,YAEnC,mCACEC,IAAKN,EACLO,KAAM,CAACV,EAAQC,GACfU,YAAa,OAkDJC,EAvCH,WACV,OACE,oCACE,kBAAC,IAAD,CAAQC,iBAAe,EAACC,WAAS,EAACd,OAAQ,CAAEL,SAAU,EAAE,EAAG,EAAG,IAAKoB,IAAK,KACtE,kBAAC,EAAD,MACA,kCAAcC,UAAW,KACzB,sCACEC,YAAU,EACVtB,SAAU,CAAC,EAAG,GAAI,GAClBqB,UAAW,IACXE,uBAAsB,KACtBC,wBAAuB,KACvBC,oBAAmB,GACnBC,sBAAqB,GACrBC,sBAAqB,GACrBC,oBAAmB,GACnBC,wBAAuB,KAEzB,gCAAY7B,SAAU,EAAE,GAAI,GAAI,IAAKqB,UAAW,KAChD,gCAAYrB,SAAU,CAAC,GAAI,GAAI,GAAIqB,UAAW,MAC9C,+BACE,0BAAMtB,SAAU,EAAE+B,KAAKC,GAAK,EAAG,EAAG,GAAI/B,SAAU,CAAC,GAAI,EAAG,GAAIgC,eAAa,GACvE,yCAAqB/B,OAAO,WAAWc,KAAM,CAAC,IAAK,KAAMb,MAAM,WAC/D,oCAAgBD,OAAO,WAAWgC,QAAS,MAM7C,kBAAC,WAAD,CAAUC,SAAU,MAClB,kBAAC,EAAD,WC7HQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1D,QAAQ0D,MAAMA,EAAMC,c","file":"static/js/main.35ca6a77.chunk.js","sourcesContent":["import React, { useRef, useState, Suspense } from \"react\";\nimport * as THREE from \"three\";\n\nimport { Canvas, useFrame, useLoader, useThree, extend } from \"react-three-fiber\";\n//import { softShadows, MeshWobbleMaterial, OrbitControls } from \"drei\";\nimport { softShadows, MeshWobbleMaterial } from \"drei\";\n\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nimport { TextureLoader, MeshStandardMaterial } from \"three\";\nimport { OBJLoader } from \"three/examples/jsm/loaders/OBJLoader\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\n\nimport \"./App.scss\";\nimport { useSpring, a } from \"react-spring/three\";\n\n//\"homepage\": \"http://https://robertasliekis.github.io/3d-floors/\",\n\nextend({ OrbitControls });\n\nsoftShadows();\n\nconst SpinningMesh = ({ position, color, speed, args }) => {\n  const mesh = useRef();\n\n  const material = new THREE.MeshStandardMaterial({\n    color: \"yellow\"\n  });\n  const [expand, setExpand] = useState(false);\n\n  const props = useSpring({\n    scale: expand ? [1.4, 1.4, 1.4] : [1, 1, 1]\n  });\n\n  return (\n    <a.mesh\n      position={position}\n      ref={mesh}\n      onClick={() => {\n        setExpand(!expand);\n      }}\n      scale={props.scale}\n      material={material}\n      castShadow\n    >\n      <boxBufferGeometry attach=\"geometry\" args={args} />\n    </a.mesh>\n  );\n};\n\nconst Floor = () => {\n  const [colors, setColors] = useState([false, false, false, false]);\n\n  const changeColor = (index) => {\n    let currentColors = [...colors];\n    currentColors[index] = !currentColors[index];\n    setColors(currentColors);\n  };\n  const { nodes } = useLoader(GLTFLoader, \"./models/floor01.glb\");\n  // console.log(nodes);\n  return (\n    <group key={colors}>\n      {console.log(\"gera\")}\n      <mesh geometry={nodes.floor1_1.geometry} onClick={() => changeColor(0)} rotation={[1.5, 0, 0]} position={[0, 10, 0]}>\n        <meshStandardMaterial attach=\"material\" color={colors[0] ? \"yellow\" : \"white\"} />\n      </mesh>\n      <mesh geometry={nodes.floor1_1.geometry} onClick={() => changeColor(1)} rotation={[1.5, 0, 0]} position={[0, 0, 0]}>\n        <meshStandardMaterial attach=\"material\" color={colors[1] ? \"yellow\" : \"white\"} />\n      </mesh>\n      <mesh geometry={nodes.floor1_1.geometry} onClick={() => changeColor(2)} rotation={[1.5, 0, 0]} position={[0, -10, 0]}>\n        <meshStandardMaterial attach=\"material\" color={colors[2] ? \"yellow\" : \"white\"} />\n      </mesh>\n      <mesh geometry={nodes.floor1_1.geometry} onClick={() => changeColor(3)} rotation={[1.5, 0, 0]} position={[0, -20, 0]}>\n        <meshStandardMaterial attach=\"material\" color={colors[3] ? \"yellow\" : \"white\"} />\n      </mesh>\n    </group>\n  );\n};\n\nconst CameraControls = () => {\n  // Get a reference to the Three.js Camera, and the canvas html element.\n  // We need these to setup the OrbitControls class.\n  // https://threejs.org/docs/#examples/en/controls/OrbitControls\n\n  const {\n    camera,\n    gl: { domElement }\n  } = useThree();\n\n  // Ref to the controls, so that we can update them on every frame using useFrame\n  const controls = useRef();\n  useFrame((state) => controls.current.update());\n  return (\n    <orbitControls\n      ref={controls}\n      args={[camera, domElement]}\n      minDistance={120}\n      // maxDistance={20}\n      // enableZoom={false}\n      // maxAzimuthAngle={Math.PI / 4}\n      // maxPolarAngle={Math.PI}\n      //   minAzimuthAngle={-Math.PI / 4}\n      // minPolarAngle={0}\n    />\n  );\n};\n\nconst App = () => {\n  return (\n    <>\n      <Canvas colorManagement shadowMap camera={{ position: [-5, 2, 10], fov: 60 }}>\n        <CameraControls />\n        <ambientLight intensity={0.3} />\n        <directionalLight\n          castShadow\n          position={[0, 10, 0]}\n          intensity={1.5}\n          shadow-mapSize-width={1024}\n          shadow-mapSize-height={1024}\n          shadow-camera-far={50}\n          shadow-camera-left={-10}\n          shadow-camera-right={10}\n          shadow-camera-top={10}\n          shadow-camera-bottom={-10}\n        />\n        <pointLight position={[-10, 0, -20]} intensity={0.5} />\n        <pointLight position={[0, -10, 0]} intensity={1.5} />\n        <group>\n          <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, -3, 0]} receiveShadow>\n            <planeBufferGeometry attach=\"geometry\" args={[100, 100]} color=\"yellow\" />\n            <shadowMaterial attach=\"material\" opacity={0.3} />\n          </mesh>\n          {/* <SpinningMesh position={[0, 1, 0]} color=\"lightblue\" args={[3, 2, 1]} speed={2} />\n          <SpinningMesh position={[-2, 1, -5]} color=\"pink\" speed={6} />\n          <SpinningMesh position={[5, 1, -2]} color=\"pink\" speed={6} /> */}\n\n          <Suspense fallback={null}>\n            <Floor />\n          </Suspense>\n        </group>\n        {/* <OrbitControls camera={[100, 200, 0]} /> */}\n      </Canvas>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}