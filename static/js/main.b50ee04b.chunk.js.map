{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["extend","OrbitControls","softShadows","Floor","useRef","floorRefs","Array","materialRefs","useFrame","state","clickedFloor","current","forEach","ref","index","indexDifference","Math","abs","position","y","useState","hovered","setHovered","setClickedFloor","nodes","useLoader","GLTFLoader","hoveredOnFloor","mouseInside","hoveredArray","map","floorObject","className","key","e","dispose","onPointerOver","stopPropagation","onPointerOut","intersections","length","onClick","clickedOnFloor","geometry","floor1_1","opacity","rotation","attach","transparent","color","CameraControls","useThree","camera","domElement","gl","controls","update","args","minDistance","App","colorManagement","shadowMap","fov","intensity","fallback","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wSAOAA,YAAO,CAAEC,oBAETC,cAIA,IAAMC,EAAQ,WACAC,mBAAZ,IACMC,EAAYD,iBAAO,IAAIE,OACvBC,EAAeH,iBAAO,IAAIE,OAEhCE,aAAS,SAACC,GAGa,OAAjBC,EAEFL,EAAUM,QAAQC,SAAQ,SAACC,EAAKC,GAC9B,IAAIC,EAAkBC,KAAKC,IAAIP,EAAeI,GAC1CJ,IAAiBI,EAEfJ,EAAeI,EACbD,EAAIK,SAASC,EAAY,GAARL,EAA+B,GAAlBC,IAChCF,EAAIK,SAASC,GATA,GAYXN,EAAIK,SAASC,EAAY,GAARL,EAA+B,GAAlBC,IAChCF,EAAIK,SAASC,GAbA,GAiBbN,EAAIK,SAASC,EAAY,GAARL,IACnBD,EAAIK,SAASC,GAlBE,MAuBrBd,EAAUM,QAAQC,SAAQ,SAACC,EAAKC,GAC1BD,EAAIK,SAASC,EAAY,GAARL,EAEnBD,EAAIK,SAASC,GA1BI,EA2BRN,EAAIK,SAASC,EAAY,GAARL,IAE1BD,EAAIK,SAASC,GA7BI,SAPP,MAgDUC,oBAAS,GAhDnB,gCAiDgBA,oBAAS,IAjDzB,gCAkDYA,oBAAS,IAlDrB,gCAoDYA,mBAAS,EAAC,GAAO,GAAO,GAAO,GAAO,KApDlD,mBAoDXC,EApDW,KAoDFC,EApDE,OAqDsBF,mBAAS,MArD/B,mBAqDXV,EArDW,KAqDGa,EArDH,KA2DVC,EAAUC,YAAUC,IAAY,wBAAhCF,MAEFG,EAAiB,SAACb,EAAOc,GAC7B,GAAqB,OAAjBlB,EAAuB,CACzB,IAAImB,EAAY,YAAOR,GAErBQ,EAAaf,KADXc,EAKJN,EAAWO,QAEXP,EAAW,EAAC,GAAO,GAAO,GAAO,GAAO,KAmB5C,OACE,+BAHmB,CAAC,EAAG,EAAG,EAAG,EAAG,GAIhBQ,KAAI,SAACC,EAAajB,GAAd,OAChB,0BACEkB,UAAS,qBAAgBlB,GACzBmB,IAAKnB,EACLD,IAAK,SAACqB,GAAD,OAAQ7B,EAAUM,QAAQG,GAASoB,GACxCC,QAAS,KACTC,cAAe,SAACF,GAAD,OAAQA,EAAEG,kBAAmBV,EAAeb,GAAO,IAClEwB,aAAc,SAACJ,GAAD,OAAOA,EAAEK,cAAcC,QAAUb,EAAeb,GAAO,IACrE2B,QAAS,SAACP,GAAD,OAAQA,EAAEG,kBAzBJ,SAACvB,GACD,OAAjBJ,EACFa,EAAgBT,GACPJ,IAAiBI,GAC1BS,EAAgB,MAqB0BmB,CAAe5B,IACrD6B,SAAUnB,EAAMoB,SAASD,SACzBE,QAAS,GACTC,SAAU,CAAC,IAAK,EAAG,GACnB5B,SAAU,CAAC,EAAG,GAAKJ,EAAO,IAE1B,0CACEiC,OAAO,WACPlC,IAAK,SAACqB,GAAD,OAAQ3B,EAAaI,QAAQG,GAASoB,GAE3Cc,aAAa,EACbC,MAAO5B,EAAQP,GAAS,SAAW,gBA8BzCoC,EAAiB,WAAO,IAAD,EAIvBC,cAFFC,EAFyB,EAEzBA,OACMC,EAHmB,EAGzBC,GAAMD,WAEFE,EAAWnD,mBAEjB,OADAI,aAAS,SAACC,GAAD,OAAW8C,EAAS5C,QAAQ6C,YAC9B,mCAAe3C,IAAK0C,EAAUE,KAAM,CAACL,EAAQC,GAAaK,YAAa,OAoBjEC,EAjBH,WACV,OACE,oCACE,kBAAC,IAAD,CAAQC,iBAAe,EAACC,WAAS,EAACT,OAAQ,CAAElC,SAAU,EAAE,EAAG,EAAG,IAAK4C,IAAK,KACtE,kBAAC,EAAD,MACA,kCAAcC,UAAW,KACzB,gCAAY7C,SAAU,EAAE,GAAI,GAAI,IAAK6C,UAAW,KAChD,+BACE,kBAAC,WAAD,CAAUC,SAAU,MAClB,kBAAC,EAAD,WCjKQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b50ee04b.chunk.js","sourcesContent":["import React, { useRef, useState, Suspense } from \"react\";\nimport { Canvas, useFrame, useLoader, useThree, extend } from \"react-three-fiber\";\nimport { softShadows } from \"drei\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport \"./App.scss\";\n\nextend({ OrbitControls });\n\nsoftShadows();\n\n//\"homepage\": \"http://https://robertasliekis.github.io/3d-floors/\",\n\nconst Floor = () => {\n  const ref = useRef();\n  const floorRefs = useRef(new Array());\n  const materialRefs = useRef(new Array());\n\n  useFrame((state) => {\n    //   const t = state.clock.getElapsedTime();\n    const animationSpeed = 1;\n    if (clickedFloor !== null) {\n      //  floorRefs.current[clickedFloor].position.y += 1;\n      floorRefs.current.forEach((ref, index) => {\n        let indexDifference = Math.abs(clickedFloor - index);\n        if (clickedFloor !== index) {\n          //  materialRefs.current[index].opacity -= 0.02;\n          if (clickedFloor < index) {\n            if (ref.position.y < index * 10 + indexDifference * 20) {\n              ref.position.y += animationSpeed;\n            }\n          } else {\n            if (ref.position.y > index * 10 - indexDifference * 20) {\n              ref.position.y -= animationSpeed;\n            }\n          }\n        } else {\n          if (ref.position.y < index * 10) {\n            ref.position.y += animationSpeed;\n          }\n        }\n      });\n    } else {\n      floorRefs.current.forEach((ref, index) => {\n        if (ref.position.y > index * 10) {\n          //   materialRefs.current[index].opacity += 0.1;\n          ref.position.y -= animationSpeed;\n        } else if (ref.position.y < index * 10) {\n          //  materialRefs.current[index].opacity += 0.1;\n          ref.position.y += animationSpeed;\n        }\n      });\n    }\n    // if (positionZ && ref.current.position.y < 50) {\n    //     ref.current.position.y += 1;\n    // }\n    // if (!positionZ && ref.current.position.y > 10) {\n    //       ref.current.position.y -= 1;\n    // }\n  });\n\n  const [colors, setColors] = useState(false);\n  const [positionZ, setPositionZ] = useState(false);\n  const [colors2, setColors2] = useState(false);\n\n  const [hovered, setHovered] = useState([false, false, false, false, false]);\n  const [clickedFloor, setClickedFloor] = useState(null);\n\n  const changeColor = () => {\n    let currentColors = colors;\n    setColors(!currentColors);\n  };\n  const { nodes } = useLoader(GLTFLoader, \"./models/floor01.glb\");\n\n  const hoveredOnFloor = (index, mouseInside) => {\n    if (clickedFloor === null) {\n      let hoveredArray = [...hovered];\n      if (mouseInside) {\n        hoveredArray[index] = true;\n      } else {\n        hoveredArray[index] = false;\n      }\n      setHovered(hoveredArray);\n    } else {\n      setHovered([false, false, false, false, false]);\n    }\n  };\n\n  const clickedOnFloor = (index) => {\n    if (clickedFloor === null) {\n      setClickedFloor(index);\n    } else if (clickedFloor === index) {\n      setClickedFloor(null);\n    }\n    // if (clickedFloor !== index) {\n    //   setClickedFloor(index);\n    // } else {\n    //   setClickedFloor(null);\n    // }\n  };\n\n  const floorObjects = [0, 1, 2, 3, 4];\n\n  return (\n    <group>\n      {floorObjects.map((floorObject, index) => (\n        <mesh\n          className={`floor floor${index}`}\n          key={index}\n          ref={(e) => (floorRefs.current[index] = e)}\n          dispose={null}\n          onPointerOver={(e) => (e.stopPropagation(), hoveredOnFloor(index, true))}\n          onPointerOut={(e) => e.intersections.length && hoveredOnFloor(index, false)}\n          onClick={(e) => (e.stopPropagation(), clickedOnFloor(index))}\n          geometry={nodes.floor1_1.geometry}\n          opacity={0.5}\n          rotation={[1.5, 0, 0]}\n          position={[0, 10 * index, 0]}\n        >\n          <meshStandardMaterial\n            attach=\"material\"\n            ref={(e) => (materialRefs.current[index] = e)}\n            // opacity={1}\n            transparent={true}\n            color={hovered[index] ? \"yellow\" : \"white\"}\n          />\n        </mesh>\n      ))}\n      {/* <mesh\n        ref={ref}\n        dispose={null}\n        onPointerOver={(e) => (e.stopPropagation(), mouseHoveredOnFloor(0))}\n        onPointerOut={(e) => e.intersections.length && mouseHoveredOnFloor(0)}\n        onClick={(e) => e.intersections.length && setPositionZ(!positionZ)}\n        geometry={nodes.floor1_1.geometry}\n        rotation={[1.5, 0, 0]}\n        position={[0, 10, 0]}\n      >\n        <meshStandardMaterial attach=\"material\" color={hovered[0] ? \"yellow\" : \"white\"} />\n      </mesh>\n      <mesh\n        onPointerOver={(e) => (e.stopPropagation(), mouseHoveredOnFloor(1))}\n        onPointerOut={(e) => e.intersections.length && mouseHoveredOnFloor(1)}\n        geometry={nodes.floor1_1.geometry}\n        // onClick={() => changeColor()}\n        rotation={[1.5, 0, 0]}\n        position={[0, 0, 0]}\n      >\n        <meshStandardMaterial attach=\"material\" color={hovered[1] ? \"blue\" : \"white\"} />\n      </mesh> */}\n    </group>\n  );\n};\n\nconst CameraControls = () => {\n  const {\n    camera,\n    gl: { domElement }\n  } = useThree();\n  const controls = useRef();\n  useFrame((state) => controls.current.update());\n  return <orbitControls ref={controls} args={[camera, domElement]} minDistance={150} />;\n};\n\nconst App = () => {\n  return (\n    <>\n      <Canvas colorManagement shadowMap camera={{ position: [-5, 2, 10], fov: 60 }}>\n        <CameraControls />\n        <ambientLight intensity={0.3} />\n        <pointLight position={[-10, 0, -20]} intensity={0.5} />\n        <group>\n          <Suspense fallback={null}>\n            <Floor />\n          </Suspense>\n        </group>\n      </Canvas>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}